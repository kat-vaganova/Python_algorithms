# 1. Проанализировать скорость и сложность одного любого алгоритма из разработанных
# в рамках домашнего задания первых трех уроков.
# Примечание. Идеальным решением будет:
# a. выбрать хорошую задачу, которую имеет смысл оценивать,
# b. написать 3 варианта кода (один у вас уже есть),
# c. проанализировать 3 варианта и выбрать оптимальный,
# d. результаты анализа вставить в виде комментариев в файл с кодом
# (не забудьте указать, для каких N вы проводили замеры),
# e. написать общий вывод: какой из трёх вариантов лучше и почему.

# lesson 3, task 4. Определить, какое число в массиве встречается чаще всего.
# сравнение цикла for и использованием словаря, с вызов пакета collection и с функцией
# наибольшей скоростью обладает вариант с использованием пакета collection.


version_1 = """
import random

n = 1000
numbers = [random.randint(1, 100) for _ in range(n)]

num_set = set(numbers)

quantity = 0
max_quantity = 0
dict = {}
most_common = 0

for el in num_set:
    quantity = numbers.count(el)
    dict[el] = quantity
    if quantity > max_quantity:
        max_quantity = quantity
        most_common = el

# print(dict)
# print(f'в массиве встречается чаще всего число: {most_common} - {max_quantity} раз')
"""


from timeit import timeit
print(timeit(stmt=version_1, number=100), 'for n =')

# 0.024796699988655746 for n = 10
# 0.2976221999997506 for n = 100
# 0.258167299994966 for n = 300
# 0.26518649999343324 for n = 500
# 0.4129701999918325 for n = 1000
